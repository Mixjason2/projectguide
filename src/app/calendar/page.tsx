'use client';

import React, { useMemo, useState } from 'react';
import FullCalendar from '@fullcalendar/react';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGridPlugin from '@fullcalendar/timegrid';
import listPlugin from '@fullcalendar/list';
import interactionPlugin from '@fullcalendar/interaction';
import { DatesSetArg } from '@fullcalendar/core';

import CssgGuide from '../cssguide';
import useFetchJobs from '../component/useFetchJobs';
import { getTotalPax, findDuplicateNames } from '../component/jobHelpers';
import LoadingIndicator from '../component/LoadingIndicator';
import ErrorMessage from '../component/ErrorMessage';
import CalendarEventRenderer from '../component/CalendarEventRenderer';
import JobAction from '../component/JobAction';
import './calendar.css';

// ‡πÉ‡∏ä‡πâ type Job ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏≤‡∏á
import type { Job } from '../types/job';

export default function CalendarExcel() {
  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• jobs ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞ error
  const { jobs, loading, error, setJobs } = useFetchJobs();

  // ‡πÄ‡∏Å‡πá‡∏ö view ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô (dayGridMonth, timeGridWeek, ‡∏Ø‡∏•‡∏Ø)
  const [currentView, setCurrentView] = useState<string>('dayGridMonth');

  // ‡πÄ‡∏Å‡πá‡∏ö job ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á action ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
  const [selectedJob, setSelectedJob] = useState<Job | null>(null);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á event list ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FullCalendar ‡∏ï‡∏≤‡∏° view ‡πÅ‡∏•‡∏∞ jobs
  const events = useMemo(() => {
    if (currentView === 'dayGridMonth') {
      // ‡∏£‡∏ß‡∏° jobs ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà PickupDate (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ job ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
      const grouped: Record<string, Job[]> = {};
      jobs
        .filter(j => j.IsConfirmed)
        .forEach(job => {
          const date = job.PickupDate.split('T')[0];
          (grouped[date] ??= []).push(job);
        });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á event group ‡πÅ‡∏ö‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô job ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
      return Object.entries(grouped).map(([date, jobsOnDate]) => ({
        title: `(${jobsOnDate.length}): job`,
        start: date,
        allDay: true,
        backgroundColor: '#95c941',
        borderColor: '#0369a1',
        textColor: 'white',
        extendedProps: {
          jobs: jobsOnDate,
          isChanged: jobsOnDate.some(j => j.isChange),
        },
      }));
    } else {
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö view ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏™‡∏î‡∏á event ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° job
      return jobs
        .filter(j => j.IsConfirmed)
        .map(job => ({
          id: job.key.toString(),
          title: ` ${job.serviceProductName} `,
          start: job.PickupDate,
          backgroundColor: job.isChange ? '#fb923c' : '#95c941',
          borderColor: '#0369a1',
          textColor: 'white',
          extendedProps: {
            job,
          },
        }));
    }
  }, [jobs, currentView]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å event ‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô
  const handleEventClick = (info: any) => {
    if (currentView === 'dayGridMonth') {
      // ‡∏Å‡∏£‡∏ì‡∏µ month view ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î job ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
      const jobsOnDate: Job[] = info.event.extendedProps.jobs || [];
      const clickedDate = info.event.startStr.split('T')[0];
      const duplicateNames = findDuplicateNames(jobsOnDate);
      const details = jobsOnDate.map((job, i) => {
        const pickupTime = new Date(job.PickupDate).toLocaleTimeString('en-GB', {
          hour: '2-digit',
          minute: '2-digit',
        });
        const totalPax = getTotalPax(job);
        return `${i + 1}. üïí ${pickupTime} üìç ${job.Pickup} | üë§ ${totalPax} Pax | üé´ PNR: ${job.PNR}`;
      }).join('\n');

      alert(`üìÖ Date: ${clickedDate}
üë§ Duplicate Names: ${duplicateNames.length > 0 ? duplicateNames.join(', ') : 'None'}
üìå Jobs:\n${details}`);
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ view ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å job ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      const job: Job = info.event.extendedProps.job;
      setSelectedJob(job);
    }
  };

  if (loading) return <LoadingIndicator />;
  if (error) return <ErrorMessage error={error} />;

  return (
    <CssgGuide>
      <FullCalendar
        plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin]}
        initialView="timeGridWeek"
        events={events}
        datesSet={(arg: DatesSetArg) => setCurrentView(arg.view.type)}
        height="auto"
        contentHeight="auto"
        aspectRatio={1.7}
        headerToolbar={{
          start: 'title',
          center: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth',
          end: 'today prev,next',
        }}
        editable={false}
        selectable={true}
        expandRows={true}
        eventClick={handleEventClick}
        eventContent={CalendarEventRenderer}
        slotLabelFormat={{
          hour: '2-digit',
          minute: '2-digit',
          meridiem: false,
        }}
        dayHeaderFormat={{
          weekday: 'short',
          day: 'numeric',
        }}
      />

      {/* ‡πÅ‡∏™‡∏î‡∏á JobAction ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å job ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà Confirm ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà Cancel */}
      {selectedJob && !selectedJob.IsConfirmed && !selectedJob.IsCancel && (
        <div className="mt-6 max-w-xl mx-auto">
          <JobAction
            job={{
              ...selectedJob,
              all: [selectedJob],
              keys: selectedJob.key
            }}
            setJobs={setJobs}
          />
        </div>
      )}
    </CssgGuide>
  );
}
