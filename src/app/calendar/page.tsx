'use client';

import React, { useState, useEffect, useCallback, useRef } from 'react'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useRef
import CalendarView from './components/CalendarView';
import ErrorMessage from './components/ErrorMessage';
import { Job } from './components/types';
import './calendar.css';
import CssgGuide from '../cssguide';
import { DatesSetArg } from '@fullcalendar/core/index.js';
import type { CalendarApi } from '@fullcalendar/core'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° type CalendarApi

function addMonths(date: Date, months: number): Date {
  const d = new Date(date);
  d.setMonth(d.getMonth() + months);
  return d;
}

function formatISO(date: Date): string {
  return date.toISOString().slice(0, 10);
}

// function getDateRanges(start: string, end: string, chunkMonths = 1): { start: string; end: string }[] {
//   const ranges = [];
//   let currentStart = new Date(start);
//   const endDate = new Date(end);

//   while (currentStart < endDate) {
//     const currentEnd = addMonths(currentStart, chunkMonths);
//     ranges.push({
//       start: formatISO(currentStart),
//       end: formatISO(currentEnd < endDate ? currentEnd : endDate),
//     });
//     currentStart = currentEnd;
//   }

//   return ranges;
// }

export default function Page() {
  const [jobs, setJobs] = useState<Job[]>([]);
  const [, setLoadingInitial] = useState(false);
  const [loadingMore, setLoadingMore] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // state ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ fetch ‡∏ï‡∏≤‡∏° state ‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  const [dataStartDate] = useState(() => {
    const today = new Date();
    return formatISO(today);
  });

  const [dataEndDate] = useState(() => {
    const d = addMonths(new Date(), 2);
    return formatISO(d);
  });

  const [currentView, setCurrentView] = useState('dayGridMonth');
  const [currentCenterDate, setCurrentCenterDate] = useState<Date | null>(null);

  const [, setFetchedRanges] = useState<{ start: string; end: string }[]>([]);

  // const hasFetchedRange = useCallback((start: string, end: string): boolean => {
  //   return fetchedRanges.some(
  //     (range) => start >= range.start && end <= range.end
  //   );
  // }, [fetchedRanges]);

  const addFetchedRange = useCallback((start: string, end: string) => {
    setFetchedRanges(prev => [...prev, { start, end }]);
  }, []);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useRef ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AbortController
  const abortControllerRef = useRef<AbortController | null>(null);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° calendarApiRef ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å refetchEvents ‡πÑ‡∏î‡πâ
  const calendarApiRef = useRef<CalendarApi | null>(null);

  const fetchJobs = useCallback((start: string, end: string, isInitial = false) => {
    abortControllerRef.current?.abort();

    const token = localStorage.getItem('token') || '';
    if (!token) {
      setError('Token not found. Please log in.');
      setLoadingInitial(false);
      setLoadingMore(false);
      setJobs([]); // ‡∏•‡πâ‡∏≤‡∏á
      return Promise.resolve();
    }

    if (isInitial) {
      setLoadingInitial(true);
      setJobs([]); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á jobs ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
      setFetchedRanges([]); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á range cache
    } else {
      setLoadingMore(true);
    }

    setError(null);
    console.time('‚è±Ô∏è fetchJobs');

    const controller = new AbortController();
    abortControllerRef.current = controller;

    return fetch('https://operation.dth.travel:7082/api/guide/job/confirm', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token, startdate: start, enddate: end }),
      signal: controller.signal,
    })
      .then(async res => {
        if (!res.ok) {
          if (res.status === 401) {
            localStorage.removeItem('token');
            window.location.href = '/login';
          }
          throw new Error(await res.text());
        }
        return res.json();
      })
      .then((data: Job[]) => {
        console.timeEnd('‚è±Ô∏è fetchJobs');

        // ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á IsConfirmed ‡∏≠‡∏≠‡∏Å
        // const confirmedOnly = data.filter(j => j.IsConfirmed); // ‚ùå ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å

        setJobs(prev => {
          const combined = [...prev];
          // ‡πÉ‡∏ä‡πâ data ‡∏ï‡∏£‡∏á‡πÜ ‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á
          data.forEach(newJob => {
            if (!combined.find(j => j.key === newJob.key)) {
              combined.push(newJob);
            }
          });
          // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh FullCalendar
          setTimeout(() => {
            calendarApiRef.current?.refetchEvents?.();
          }, 0);

          return combined;
        });
        addFetchedRange(start, end);
        setError(null);
      })

      .catch(err => {
        console.timeEnd('‚è±Ô∏è fetchJobs');
        if (err.name === 'AbortError') {
          console.log('üõë Fetch aborted');
          return;
        }
        setError(err.message || 'Failed to fetch');
      })
      .finally(() => {
        if (isInitial) {
          setLoadingInitial(false);
        } else {
          setLoadingMore(false);
        }
      });
  }, [addFetchedRange]);

  const isFetchingRef = useRef(false);

  const fetchJobsChunked = useCallback(
    async (start: string, end: string, isInitial = false) => {
      if (isFetchingRef.current) {
        console.log("‚õî Already fetching, skip...");
        return;
      }
      isFetchingRef.current = true;

      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡πà‡∏ß‡∏á fetch ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
      const startDate = new Date(start);
      const endDate = new Date(end);

      const ranges: { start: string; end: string }[] = [];
      let chunkStart = new Date(startDate);
      while (chunkStart < endDate) {
        let chunkEnd = addMonths(chunkStart, 1);
        if (chunkEnd > endDate) chunkEnd = endDate;
        ranges.push({
          start: formatISO(chunkStart),
          end: formatISO(chunkEnd),
        });
        chunkStart = chunkEnd;
      }

      try {
        // fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        await Promise.all(
          ranges.map(range =>
            fetchJobs(range.start, range.end, isInitial)
          )
        );
      } finally {
        isFetchingRef.current = false;
      }
    },
    [fetchJobs]
  );

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° ref ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏ô state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö fetch
  const loadedStartRef = useRef(dataStartDate);
  const loadedEndRef = useRef(dataEndDate);

  // ‚ùå ‡∏•‡∏ö useEffect ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà fetch ‡∏ï‡∏≤‡∏° dataStartDate, dataEndDate ‡∏ó‡∏¥‡πâ‡∏á
  // useEffect(() => {
  //   fetchJobsChunked(dataStartDate, dataEndDate, true);
  // }, [dataStartDate, dataEndDate, fetchJobsChunked]);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect ‡πÅ‡∏Ñ‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å load ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  useEffect(() => {
    const today = new Date();
    const future = addMonths(today, 0);
    const start = formatISO(today);
    const end = formatISO(future);

    fetchJobsChunked(start, end, true);

    loadedStartRef.current = start;
    loadedEndRef.current = end;
  }, [fetchJobsChunked]);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
const handleDatesSet = (arg: DatesSetArg) => {
  if (isFetchingRef.current) return;

  if (arg.view.type !== currentView) {
    setCurrentView(arg.view.type);
  }

  if (
    !currentCenterDate ||
    arg.view.currentStart.getTime() !== currentCenterDate.getTime()
  ) {
    setCurrentCenterDate(arg.view.currentStart);
  }

  const viewStart = formatISO(arg.start);
  const viewEnd = formatISO(arg.end);

  const loadMoreData = async () => {
    if (viewEnd > loadedEndRef.current) {
      const newEnd = formatISO(addMonths(new Date(loadedEndRef.current), 1));
      await fetchJobsChunked(loadedEndRef.current, newEnd);
      loadedEndRef.current = newEnd;
    }

    if (viewStart < loadedStartRef.current) {
      const newStart = formatISO(addMonths(new Date(loadedStartRef.current), -1));
      await fetchJobsChunked(newStart, loadedStartRef.current);
      loadedStartRef.current = newStart;
    }
  };

  loadMoreData();
};


  if (error && jobs.length === 0) return <ErrorMessage error={error} />;

  return (
    <CssgGuide>
      <div className="min-h-screen bg-white p-4">
        <div className="max-w-4xl mx-auto p-4 overflow-auto">
          <h1 className="text-2xl font-bold mb-4">Calendar</h1>
          <CalendarView
            jobs={jobs}
            gotoDate={currentCenterDate}
            currentViewProp={currentView}
            onDatesSet={handleDatesSet}
            loading={loadingMore}
            calendarApiRef={calendarApiRef} // ‚úÖ ‡∏™‡πà‡∏á ref ‡πÑ‡∏õ
          />

          {loadingMore && (
            <div
              className="flex items-center justify-center bg-white bg-opacity-80 rounded-lg shadow-md p-4"
              style={{
                position: 'absolute',
                top: '50%',
                left: '50%',
                transform: 'translate(-50%, -50%)',
                zIndex: 9999,
                pointerEvents: 'none',
              }}
            >
              <div className="animate-spin rounded-full h-5 w-5 border-t-2 border-green-500" />
              <span className="ml-2 text-black-600 text-sm">Loading more data...</span>
            </div>
          )}

          {/* ‡πÅ‡∏™‡∏î‡∏á error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô loadingMore = false */}
          {!loadingMore && error && <p className="text-red-600">{error}</p>}
        </div>
      </div>
    </CssgGuide>
  );
}
